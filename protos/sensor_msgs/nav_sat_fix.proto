syntax = "proto3";

package sensor_msgs;

import "std_msgs/header.proto";
import "sensor_msgs/nav_sat_status.proto";

// Navigation Satellite fix for any Global Navigation Satellite System
//
// Specified using the WGS 84 reference ellipsoid
// header.stamp specifies the ROS time for this measurement (the
//        corresponding satellite time may be reported using the
//        sensor_msgs/TimeReference message).
//
// header.frame_id is the frame of reference reported by the satellite
//        receiver, usually the location of the antenna.  This is a
//        Euclidean frame relative to the vehicle, not a reference
//        ellipsoid.

message NavSatFix {
  std_msgs.Header header = 1;

  // Satellite fix status information.
  NavSatStatus status = 2;

  // Latitude [degrees]. Positive is north of equator; negative is south.
  double latitude = 3;

  // Longitude [degrees]. Positive is east of prime meridian; negative is west.
  double longitude = 4;

  // Altitude [m]. Positive is above the WGS 84 ellipsoid
  // (quiet NaN if no altitude is available).
  double altitude = 5;

  // Position covariance [m^2] defined relative to a tangential plane
  // through the reported position. The components are East, North, and
  // Up (ENU), in row-major order.
  //
  // Beware: this coordinate system exhibits singularities at the poles.
  repeated double position_covariance = 6;

  // If the covariance of the fix is known, fill it in completely. If the
  // GPS receiver provides the variance of each measurement, put them
  // along the diagonal. If only Dilution of Precision is available,
  // estimate an approximate covariance from that.

  enum CovarianceType {
    UNKNOWN = 0;
    APPROXIMATED = 1;
    DIAGONAL_KNOWN = 2;
    KNOWN = 3;
  }

  CovarianceType position_covariance_type = 7;

}
